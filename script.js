document.addEventListener('DOMContentLoaded', function () {
    var calendarEl = document.getElementById('calendar');
    var modal = document.getElementById('eventModal');
    var partySelect = document.getElementById('partySelect');
    var savePartyButton = document.getElementById('saveParty');
    var partyFilter = document.getElementById('partyFilter');
    var allEvents = [];
    var partyMap = {}; 
    var selectedEvent = null;
    var calendar; // Definujeme promƒõnnou pro kalend√°≈ô

const isLocal = window.location.hostname === "localhost";

const API_BASE_URL = isLocal
    ? "http://127.0.0.1:5001/kalendar-831f8/us-central1"
    : "https://us-central1-kalendar-831f8.cloudfunctions.net";

    // üü¢ 1Ô∏è‚É£ Naƒçten√≠ dat z backendu
async function fetchAppSheetData() {
    try {
        console.log("üì° Odes√≠l√°m po≈æadavek na backend...");

        const response = await fetch("https://us-central1-kalendar-831f8.cloudfunctions.net/fetchAppSheetData");

        if (!response.ok) {
            throw new Error(`Chyba API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log("üî• Data p≈ôijat√° z Firebase:", data);

        // ‚úÖ Ovƒõ≈ô√≠me, ≈æe `data.events` existuje a je pole
        if (!data.events || !Array.isArray(data.events)) {
            throw new Error("‚ùå Chyba: Data z backendu nejsou ve spr√°vn√©m form√°tu.");
        }

        // ‚úÖ P≈ôid√°me kontrolu, jestli spr√°vnƒõ z√≠sk√°v√°me n√°zvy kl√≠ƒç≈Ø
        console.log("üîç Prvn√≠ objekt z dat pro kontrolu:", data.events[0]);

        // ‚úÖ Spr√°vn√© mapov√°n√≠ dat
        allEvents = data.events.map(event => {
            let id = event["Row ID"] || event["id"] || "Nezn√°m√© ID"; // Oprava chybƒõj√≠c√≠ho ID
            let title = event["Obec"] || event["title"] || "Nezn√°m√° obec";
            let start = formatDate(event["Datum"] || event["start"]); // Form√°tujeme datum
            let partaColor = partyMap[event["Parta"]] ? partyMap[event["Parta"]].color : "#145C7E"; // Barva party

            let transformedEvent = {
                id: id,
                title: title,
                start: start,
                color: partaColor,
                extendedProps: {
                    status: event["Status"] || "Nezn√°m√Ω status",
                    odeslane: event["Odeslan√©"] === "Y",
                    hotove: event["Hotov√©"] === "Y",
                    predane: event["P≈ôedan√©"] === "Y",
                    detail: event["Detail"] || ""
                }
            };

            console.log("üìå Transformovan√° ud√°lost pro kalend√°≈ô:", transformedEvent);
            return transformedEvent;
        });

        // ‚úÖ Ulo≈æ√≠me mapu party
        partyMap = data.partyMap || {};

        console.log("üìÖ Form√°tovan√° data pro kalend√°≈ô:", allEvents);

        renderCalendar();
        populateFilter();
        renderLegend();
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ dat z backendu:", error);
    }
}



    // ‚úÖ Funkce pro form√°tov√°n√≠ data (YYYY-MM-DD)
function formatDate(dateStr) {
    if (!dateStr || typeof dateStr !== "string") return null;

    let parts = dateStr.split("/");
    if (parts.length !== 3) return null;

    let day = parseInt(parts[0]);
    let month = parseInt(parts[1]);
    let year = parts[2];

    if (year.length === 2) {
        year = `20${year}`;
    }

    // Pokud je den vƒõt≈°√≠ ne≈æ 12, pravdƒõpodobnƒõ je ve form√°tu DD/MM/YYYY
    if (day > 12) {
        [day, month] = [month, day];
    }

    return `${year}-${month.toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`;
}



// üü¢ 2Ô∏è‚É£ Funkce pro zobrazen√≠ kalend√°≈ôe
function renderCalendar() {
    console.log("üìÖ Rendering kalend√°≈ô s ud√°lostmi:", allEvents);

    let eventsForCalendar = allEvents.map(event => ({
        id: event.id,
        title: event.title || "Nezn√°m√° obec",
        start: event.start, // ‚úÖ Data u≈æ jsou spr√°vnƒõ form√°tovan√°
        color: event.color, // ‚úÖ Barva spr√°vnƒõ p≈ôi≈ôazena
        extendedProps: event.extendedProps
    }));

    console.log("üìå Data poslan√° do FullCalendar:", eventsForCalendar);

    calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        editable: true,
        locale: 'cs',
        height: 'auto',
        contentHeight: 'auto',
        aspectRatio: 1.8,
        events: eventsForCalendar,

        // üü¢ P≈ôesunut√≠ ud√°losti v kalend√°≈ôi (drag & drop)
        eventDrop: async function (info) {
            const updatedEvent = {
                id: info.event.id,
                start: info.event.startStr,
                party: info.event.extendedProps.party || null
            };

            console.log("üîÑ Ud√°lost p≈ôesunuta:", updatedEvent);

            await updateAppSheetEvent(updatedEvent.id, updatedEvent.start, updatedEvent.party);
        },

        // üü¢ Kliknut√≠ na ud√°lost ‚Üí zmƒõna party
        eventClick: function (info) {
            selectedEvent = info.event;
            partySelect.innerHTML = "";

            Object.entries(partyMap).forEach(([id, party]) => {
                let option = document.createElement("option");
                option.value = id;
                option.textContent = party.name;

                if (id === info.event.extendedProps.party) {
                    option.selected = true;
                }
                partySelect.appendChild(option);
            });

            let detailButton = document.getElementById("detailButton");
            if (info.event.extendedProps.detail) {
                detailButton.style.display = "block";
                detailButton.onclick = function () {
                    window.open(info.event.extendedProps.detail, "_blank");
                };
            } else {
                detailButton.style.display = "none";
            }

            modal.style.display = "block";
        },

        eventContent: function (arg) {
            let icon = "";
            let title = arg.event.title;

            if (arg.event.extendedProps.predane) {
                icon = "‚úçÔ∏è";
                title = title.toUpperCase();
            } else if (arg.event.extendedProps.hotove) {
                icon = "‚úÖ";
                title = title.toUpperCase();
            } else if (arg.event.extendedProps.odeslane) {
                icon = "üì©";
                title = title.toUpperCase();
            }
            return { html: `<b>${icon}</b> ${title}` };
        }
    });

    console.log("üìå Ud√°losti poslan√© do kalend√°≈ôe:", eventsForCalendar);
    calendar.render();
}


    // üü¢ 3Ô∏è‚É£ Aktualizace ud√°losti v AppSheet p≈ôes API
async function updateAppSheetEvent(eventId, newDate, newParty = null) {
    try {
        console.log(`üì° Odes√≠l√°m do Firebase: ID: ${eventId}, Datum: ${newDate}, Parta: ${newParty}`);

        const response = await fetch(`${API_BASE_URL}/updateAppSheetEvent`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ eventId, newDate, newParty })
        });

        const responseData = await response.json();
        console.log("‚úÖ Odpovƒõƒè z Firebase API:", responseData);

        fetchAppSheetData(); // üü¢ Po √∫spƒõ≈°n√© aktualizaci naƒçteme nov√© √∫daje
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi aktualizaci ud√°losti:", error);
    }
}

    // üü¢ 4Ô∏è‚É£ Ulo≈æen√≠ nov√© party
    savePartyButton.addEventListener("click", async function () {
        if (selectedEvent) {
            let selectedPartyId = partySelect.value;
            let selectedPartyName = partyMap[selectedPartyId]?.name || "Nezn√°m√° parta";
            let selectedPartyColor = partyMap[selectedPartyId]?.color || "#145C7E";

            console.log("üü¢ Nov√© ID party:", selectedPartyId);
            console.log("üü¢ N√°zev party:", selectedPartyName);
            console.log("üü¢ Barva party:", selectedPartyColor);

            const updatedEvent = allEvents.find(event => event.id === selectedEvent.id);
            if (updatedEvent) {
                updatedEvent.party = selectedPartyId;
                updatedEvent.color = selectedPartyColor;
                selectedEvent.setExtendedProp("party", selectedPartyId);
                selectedEvent.setProp("title", selectedEvent.title.split(" (")[0]);
                selectedEvent.setProp("backgroundColor", selectedPartyColor);

                await updateAppSheetEvent(updatedEvent.id, selectedEvent.startStr, selectedPartyId);
                modal.style.display = "none";
            } else {
                console.log("‚ùå Ud√°lost nebyla nalezena!");
            }
        } else {
            console.log("‚ùå `selectedEvent` je null!");
        }
    });

    // üü¢ 5Ô∏è‚É£ Funkce pro naplnƒõn√≠ filtru podle party
    function populateFilter() {
        partyFilter.innerHTML = '<option value="all">V≈°echny party</option>';

        Object.entries(partyMap).forEach(([id, party]) => {
            let option = document.createElement("option");
            option.value = id; 
            option.textContent = party.name; 
            partyFilter.appendChild(option);
        });

        partyFilter.addEventListener("change", function () {
            const selectedParty = partyFilter.value;
            calendar.removeAllEvents();

            if (selectedParty === "all") {
                calendar.addEventSource(allEvents);
            } else {
                const filteredEvents = allEvents.filter(event => event.party === selectedParty);
                calendar.addEventSource(filteredEvents);
            }
        });
    }

    function renderLegend() {
        var legendContainer = document.getElementById("legend");

        Object.entries(partyMap).forEach(([id, party]) => {
            let legendItem = document.createElement("div");
            legendItem.classList.add("legend-item");
            legendItem.style.backgroundColor = party.color;
            legendItem.textContent = party.name;
            legendContainer.appendChild(legendItem);
        });
    }

    // üü¢ 6Ô∏è‚É£ Automatick√© sledov√°n√≠ zmƒõn
async function listenForUpdates() {
    console.log("üîÑ Zahajuji kontrolu zmƒõn...");

    async function checkForChanges() {
        try {
            const response = await fetch(`${API_BASE_URL}/checkRefreshStatus`);
            const data = await response.json();

            if (data.type === "update") {
                console.log("‚úÖ Zmƒõna detekov√°na, aktualizuji kalend√°≈ô...");
                fetchAppSheetData();
            } else {
                console.log("‚è≥ ≈Ω√°dn√° zmƒõna, kontroluji znovu za 5 sekund...");
            }

            setTimeout(checkForChanges, 5000);
        } catch (error) {
            console.error("‚ùå Chyba p≈ôi kontrole zmƒõn:", error);
            setTimeout(checkForChanges, 5000);
        }
    }

    checkForChanges();
}


    // üü¢ 7Ô∏è‚É£ Spust√≠me v≈°e po naƒçten√≠ str√°nky
    fetchAppSheetData();
    listenForUpdates();
});
async function listenForUpdates() {
    console.log("üîÑ Zahajuji kontrolu zmƒõn...");

    async function checkForChanges() {
        try {
            const response = await fetch("https://us-central1-kalendar-831f8.cloudfunctions.net/checkRefreshStatus");
            const data = await response.json();

            if (data.type === "update") {
                console.log("‚úÖ Zmƒõna detekov√°na, aktualizuji kalend√°≈ô...");
                fetchAppSheetData();
            } else {
                console.log("‚è≥ ≈Ω√°dn√° zmƒõna, kontroluji znovu za 5 sekund...");
            }

            setTimeout(checkForChanges, 5000);
        } catch (error) {
            console.error("‚ùå Chyba p≈ôi kontrole zmƒõn:", error);
            setTimeout(checkForChanges, 5000);
        }
    }

    checkForChanges();
}

